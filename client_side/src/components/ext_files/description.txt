manifest:
    content_script: detect.js
    background_script: background.js

popup.js:
   Functions:
        record()
            send: "record"
            send: "stop-save"
        audioRequest()
            getAudio(audiodevices);
        getAudio(audio)
            send: "update-mic"

        getCamera(camera)
            send: "update-camera"

    chrome.tabs.getSelected(null, function(tab)
        tabs.send: "camera-request"

    send: "record-request"

    chrome.tabs.query

    OnChange:
        #flip
        #push
        #countdown
        #persistent -- send: "switch-toolbar"
        #camera-select -- send: "update-camera"
        #mic-select -- send: "update-mic"

    Change recording area:
        send: "recording-type"

    onClick:
        #record -- record();
        #more
        #awards
        #count-select
        .countdown: set countdown time
        #shortcuts
        #quality
        #fps

    listener: if-else
        "loaded" -- window.close()
        "sources" -- getCamera(request.devices);
        "sources-audio" -- getAudio(request.devices);
        "sources-noaccess" 
        "sources-loaded" -- tabs.send: "camera-request"


background_script.js:

    getDeviceId();
    chrome.runtime.onInstalled.addListener -- set sync
    chrome.tabs.query -- chrome.tabs.executeScript(tabs[index].id

    Functions:
        newRecording(stream)
            mediaRecorder = new MediaRecorder(stream, mediaConstraints);
            injectContent(true);

        saveRecording(recordedBlobs)

        endRecording(stream, recordedBlobs)
            saveRecording(recordedBlobs);
            tabs.send: "end"
            stream --> track.stop();

        getDesktop()
            output.addTrack() --> audio and video tracks
            newRecording(output);
            event= recordedBlobs.push(event.data);
            mediaRecorder.onstop= endRecording(stream, recordedBlobs);

        getTab()
            output.addTrack() --> audio and video tracks
            newRecording(output);
            event= recordedBlobs.push(event.data);
            mediaRecorder.onstop= endRecording(stream, recordedBlobs);
    
        startRecording()
            if -- injectContent(true);
            getDeviceId();
            record();
        
        record()
            chrome.windows.getCurrent(function(window)
            get --> fps, quality, mic
            getDesktop(); or getTab();

        injectContent(start)
            if script not injected:
                execute content.js or cameracontent.js
            else:
                tabs.send: "restart-cam" or "restart"

        updateMicrophone(id, request)
            if "camera-only": tabs.send: "update-mic"
            else micstream.tracks.stop()
                catch -- tabs.send: "no-mic-access"

        pauseRecording()
        resumeRecording()
        stopRecording(save)
            if != "camera-only": mediaRecorder.stop();
            else tabs.send: "stop-cancel" or "stop-save" 
            tabs.send: "end"

        getDeviceId()
            audiodevices.push(...)
            send: "audio-done"

        audioSwitch(source, enable)
            if != "camera-only" .....
            else tabs.send: "mic-switch"

        updateCamera(request)
        pushToTalk(request, id)

        countdownOver()
            if = "camera-only" tabs.send: "camera-record"
            else mediaRecorder.start(1000);
        
        pageUpdated(sender)
            injectContent(false)

        

    listeners: if request.type==
        "record" --> startRecording();
        "pause" -->  pauseRecording(); sendResponse({success: true});
        "resume" --> resumeRecording(); sendResponse({success: true});
        "stop-save" --> stopRecording(request.type);
        "stop-cancel" --> stopRecording(request.type);
        "audio-request" --> sendResponse({devices: audiodevices});
        "update-mic" --> updateMicrophone(request.id, request);
        "update-camera" --> updateCamera(request);
        "audio-switch" --> audioSwitch(request.source, request.enable);
        "camera-list" --> tabs.send
        "flip-camera" --> tabs.send
        "push-to-talk" --> pushtotalk(request);
        "switch-toolbar" --> countdownOver();
        "countdown" --> "recording-type"
        "record-request" --> sendResponse({recording: recording});
        "pause-camera" --> tabs.send: "pause-camera"
        "resume-camera" --> tabs.send: "resume-camera"
        "no-camera-access" --> tabs.send: "no-camera-access"
        "audio-check" --> getDeviceId();
        "end-camera-recording" --> tabs.send:  "end-recording"
        "sources-loaded" --> pageUpdated(sender);
        "camera-size"
        "camera-pos"

detect.js:
    inject: sources.js & audiosources.js

sources.js:
    getSources(request)
        send: "sources"
        catch send: "sources-noaccess"

    listeners:
        "camera-request" --> getSources(request);

    send: "sources-loaded"  

audiosources.js:
    getSources(request)
        send: "sources-audio"
        catch send: "sources-audio-noaccess"

    listeners:
        "camera-request" --> getSources(request);

    send: "sources-loaded"  










        











